<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Chatbot</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font for Inter */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');

        body {
            font-family: 'Inter', sans-serif;
            background-color: #000; /* Black background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            color: #fff; /* Default text color for the body */
        }

        .chat-container {
            width: 100%;
            max-width: 480px; /* Max width for chat on larger screens */
            height: 90vh; /* Take up most of the viewport height */
            display: flex;
            flex-direction: column;
            background-color: #1a1a1a; /* Slightly lighter black for the chat box */
            border-radius: 1rem; /* Rounded corners for the main container */
            overflow: hidden; /* Hide overflow for chat messages */
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5); /* Subtle shadow */
        }

        .chat-messages {
            flex-grow: 1;
            padding: 1rem;
            overflow-y: auto; /* Enable scrolling for messages */
            display: flex;
            flex-direction: column;
            gap: 0.75rem; /* Space between messages */
        }

        .message-bubble {
            max-width: 80%; /* Limit bubble width */
            padding: 0.75rem 1rem;
            border-radius: 0.75rem; /* Rounded corners for message bubbles */
            word-wrap: break-word; /* Ensure long words wrap */
        }

        .ai-message {
            background-color: #333; /* Gray for AI messages */
            color: #fff;
            align-self: flex-start; /* Align AI messages to the left */
        }

        .user-message {
            background-color: #fff; /* White for user messages */
            color: #000;
            align-self: flex-end; /* Align user messages to the right */
        }

        .chat-input-area {
            display: flex;
            padding: 1rem;
            background-color: #222; /* Darker gray for input area */
            border-top: 1px solid #444; /* Separator line */
            gap: 0.5rem;
        }

        .chat-input {
            flex-grow: 1;
            padding: 0.75rem 1rem;
            border-radius: 0.75rem; /* Rounded corners for input field */
            border: 1px solid #555;
            background-color: #333;
            color: #fff;
            outline: none; /* Remove outline on focus */
        }

        .chat-input:focus {
            border-color: #777; /* Slightly lighter border on focus */
        }

        .send-button {
            background-color: #555; /* Dark gray for button */
            color: #fff;
            padding: 0.75rem 1rem;
            border-radius: 0.75rem; /* Rounded corners for button */
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease;
        }

        .send-button:hover {
            background-color: #777; /* Lighter gray on hover */
        }

        .send-button:active {
            background-color: #999; /* Even lighter gray on click */
        }

        /* SVG icon styling */
        .send-icon {
            width: 1.25rem; /* Size of the icon */
            height: 1.25rem;
            fill: currentColor; /* Use button's text color for the icon */
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-messages" id="chat-messages">
            <div class="message-bubble ai-message">Hi, how can I help?</div>
        </div>
        <div class="chat-input-area">
            <input type="text" id="user-input" class="chat-input" placeholder="Type your message...">
            <button id="send-button" class="send-button">
                <svg class="send-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                </svg>
            </button>
        </div>
    </div>

    <script>
        const chatMessages = document.getElementById('chat-messages');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');

        // Function to add a message to the chat display
        function addMessage(sender, message) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message-bubble');
            if (sender === 'user') {
                messageDiv.classList.add('user-message');
            } else {
                messageDiv.classList.add('ai-message');
            }
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            // Scroll to the bottom to show the latest message
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // AI response logic
        function getAiResponse(message) {
            const lowerCaseMessage = message.toLowerCase().trim();

            if (lowerCaseMessage === "hi" || lowerCaseMessage === "hello" || lowerCaseMessage === "hey") {
                return "Hello there!";
            } else if (lowerCaseMessage.includes("how are you")) {
                return "I'm just a program, but I'm doing great! How about you?";
            } else if (lowerCaseMessage.includes("what is your name")) {
                return "I don't have a name, I'm just an AI.";
            }
            // Check for phrases asking about capabilities
            else if (['what', 'can', 'do', 'you'].every(word => lowerCaseMessage.includes(word))) {
                return "I can respond to basic greetings like 'hi' or 'hello', tell you how I'm doing, and tell you my name (or lack thereof!). I can also tell you what I can do, and decline image generation requests.";
            }
            // Improved logic: Decline image generation requests
            else if (lowerCaseMessage.includes('image') && (lowerCaseMessage.includes('make') || lowerCaseMessage.includes('generate') || lowerCaseMessage.includes('create'))) {
                return "Sorry, but I can't generate images.";
            }
            // Check for "what/how are you doing?"
            else if (['what', 'how', 'you', 'are', 'doing'].every(word => lowerCaseMessage.includes(word))) {
                return "I'm just a program, so I don't 'do' things in the human sense, but I'm ready to assist you!";
            }
            else {
                return "I'm sorry, I don't understand that. Can you rephrase?";
            }
        }

        // Function to handle sending a message
        function sendMessage() {
            const userMessage = userInput.value.trim();
            if (userMessage === "") {
                return; // Don't send empty messages
            }

            addMessage('user', userMessage);
            userInput.value = ''; // Clear input field

            // Get AI response after a short delay for a more natural feel
            setTimeout(() => {
                const aiResponse = getAiResponse(userMessage);
                addMessage('ai', aiResponse);
            }, 500); // 0.5 second delay
        }

        // Event listeners
        sendButton.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>

